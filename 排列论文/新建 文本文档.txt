#include <iostream>
#include <queue>
#include <map>
#include <vector>
using namespace std;

bool flag1 = true;
bool flag2 = false;
map<int, vector<int>> graph;
vector<int> degree;
queue<int> p;
vector<int> done;

void add(int a, int b) {
    graph[a].push_back(b);
}

void act() {
    while (!p.empty()&&flag1) {
        int m = p.front();
        p.pop();
        int num = 0;
        for (auto q : graph[m]) {
            degree[q]--;
        }
        for (size_t i = 1; i < degree.size(); ++i) {
            if (degree[i] == 0&&done[i]) {
                p.push(i);
                done[i] = false;
                num++;
            }
        }
        if (num > 1) {
            flag2 = true;
        }
    }
}

int main() {
    int n, e;
    while (cin >> n >> e) {
        if (n == 0 || e == 0) {
            break;
        }
        graph.clear();
        degree.clear();
        p = queue<int>();
        done.clear();
        flag1 = true;
        flag2 = false;
        degree.resize(n + 1, 0);
        done.resize(n + 1, true);
        int a, b;
        int num = 0;
        for (int i = 1; i <= e; i++) {
            cin >> b >> a;
            add(b, a);
            degree[a]++;
        }
        for (int i = 1; i <= n; i++) {
            if (degree[i] == 0 && done[i]) {
                p.push(i);
                done[i] = false;
                num++;
            }
        }
        if (num > 1) {
            flag2 = true;
        }
        if (p.empty()) {
            flag1 = false;
        }
        act();
        for (int i = 1;i <= n && flag1;i++) {
            if (done[i]) {
                flag1 = false;
            }
        }
        for (int i = 1; i <= n && flag1; i++) {
            if (degree[i] < 0) {
                flag1 = false;
            }
        }
        if (!flag1) {
            cout << 0 << endl;
        }
        else {
            if (flag2) {
                cout << 2 << endl;
            }
            else {
                cout << 1 << endl;
            }
        }
    }
    return 0;
}
