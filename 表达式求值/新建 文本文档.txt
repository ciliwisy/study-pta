#include <iostream>
#include <string>
#include <stack>

using namespace std;

bool isDigit(char ch) {
    return (ch >= '0' && ch <= '9');
}

int power(int a, int b) {
    if (b == 0) return 1;
    else if (b % 2 == 1) return power(a, b - 1) * a;
    else {
        int x = power(a, b / 2);
        return x * x;
    }
}

int operate(int a, char c, int b, bool* invalid) {
    if (c == '^') {
        return power(a, b);
    }
    else if (c == '*') {
        return a * b;
    }
    else if (c == '/') {
        if (b == 0) {
            *invalid = true;
            return 0;
        }
        return a / b;
    }
    else if (c == '-') {
        return a - b;
    }
    else if (c == '+') {
        return a + b;
    }
    else {
        *invalid = true;
        return 0;
    }
}

int precedence(char c) {
    if (c == '^') return 3;
    if (c == '*' || c == '/') return 2;
    if (c == '+' || c == '-') return 1;
    return 0;
}

int main() {
    string s;
    while (cin >> s) {
        stack<int> num;
        stack<char> op;
        bool invalid = false;
        int i = 0;
        while (i < s.length()) {
            if (isDigit(s[i])) {
                int numVal = 0;
                while (i < s.length() && isDigit(s[i])) {
                    numVal = numVal * 10 + (s[i] - '0');
                    i++;
                }
                num.push(numVal);
            }
            else if (s[i] == '(') {
                op.push(s[i]);
                i++;
            }
            else if (s[i] == ')') {
                while (!op.empty() && op.top() != '(') {
                    char c = op.top();
                    op.pop();
                    if (num.empty()) {
                        invalid = true;
                        break;
                    }
                    int b = num.top();
                    num.pop();
                    if (num.empty()) {
                        invalid = true;
                        break;
                    }
                    int a = num.top();
                    num.pop();
                    num.push(operate(a, c, b, &invalid));
                }
                if (!op.empty() && op.top() == '(') {
                    op.pop();
                }
                else {
                    invalid = true;
                    break;
                }
                i++;
            }
            else if (s[i] == '^' || s[i] == '*' || s[i] == '/' || s[i] == '+' || s[i] == '-') {
                while (!op.empty() && precedence(op.top()) >= precedence(s[i])) {
                    char c = op.top();
                    op.pop();
                    if (num.empty()) {
                        invalid = true;
                        break;
                    }
                    int b = num.top();
                    num.pop();
                    if (num.empty()) {
                        invalid = true;
                        break;
                    }
                    int a = num.top();
                    num.pop();
                    num.push(operate(a, c, b, &invalid));
                }
                op.push(s[i]);
                i++;
            }
            else {
                invalid = true;
                break;
            }
        }
        while (!op.empty()) {
            char c = op.top();
            op.pop();
            if (num.empty()) {
                invalid = true;
                break;
            }
            int b = num.top();
            num.pop();
            if (num.empty()) {
                invalid = true;
                break;
            }
            int a = num.top();
            num.pop();
            num.push(operate(a, c, b, &invalid));
        }
        if (invalid || num.size() != 1) {
            cout << "INVALID" << endl;
        }
        else {
            cout << num.top() << endl;
        }
    }
    return 0;
}
